{"version":3,"file":"static/js/683.bfd88dc1.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAA8I,8BAA9I,EAAsL,yB,mBCGzKA,EAAoC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAC/CC,EAAI,mBAAeF,GACvB,OACI,gBAAKG,UAAWC,EAAhB,UAA0B,SAAC,KAAD,CAASC,GAAIH,EAAb,SAAoBD,OCJzCK,EAAiC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC5C,OACI,gBAAKJ,UAAWC,EAAhB,SAA4BG,K,6BCkBpC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,YAAa,WACTD,GAASE,EAAAA,EAAAA,OAEbC,cAAe,SAACC,GACZJ,GAASK,EAAAA,EAAAA,IAAqBD,SAMtCE,EAAAA,EAFJ,EChBmD,SAAC,GAA+C,IAA9CP,EAA6C,EAA7CA,YAAaE,EAAgC,EAAhCA,YAAaE,EAAmB,EAAnBA,cAEpEI,EAAmCR,EAAnCQ,MAAOC,EAA4BT,EAA5BS,SAAUC,EAAkBV,EAAlBU,eAElBC,EAAcH,EAAMI,KAAK,SAAAC,GAAC,OAAI,SAACzB,EAAD,CAAaC,GAAIwB,EAAExB,GAAeC,KAAMuB,EAAEvB,MAAduB,EAAExB,OAC5DyB,EAAcL,EAASG,KAAK,SAAAG,GAAC,OAAI,SAACpB,EAAD,CAASC,QAASmB,EAAEnB,SAAgBmB,EAAE1B,OAO7E,OACI,iBAAKG,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,UACKqB,GACD,4BACI,qBAAUE,MAAON,EAAgBO,SAbzB,SAACC,GACrB,IAAIb,EAAOa,EAAMC,cAAcH,MAC/BZ,EAAcC,OAYF,SAACe,EAAA,EAAD,CAAQC,MAAM,eAAeC,SAAUpB,iB,0ECrB9CkB,EAAoC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtD,OACI,mBAAQC,QAASD,EAAjB,SAA4BD,M,gICD9BG,EAA6B,SAACzB,GAChC,MAAO,CACH0B,OAAQ1B,EAAM2B,KAAKD,SAIpB,SAASlB,EAAqBoB,GAOjC,OAAO7B,EAAAA,EAAAA,IAAQ0B,EAAR1B,EANP,SAA2B8B,GACQA,EAAxBH,OAAP,IAAkBI,GAAlB,OAA+BD,EAA/B,GACA,OAAKA,EAAMH,QACJ,SAACE,GAAD,UAAeE,KADI,SAAC,KAAD,CAAUnC,GAAG","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","Components/common/Button/Button.tsx","HOC/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Dialogs\":\"Dialogs_Dialogs__9EgFG\",\"DialogsItem\":\"Dialogs_DialogsItem__g6hnt\",\"Dialog\":\"Dialogs_Dialog__cYRYp\",\"MessegesItem\":\"Dialogs_MessegesItem__DmzVE\",\"Message\":\"Dialogs_Message__+wnNJ\"};","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport s from '../Dialogs.module.css';\n\nexport const DialogsItem: React.FC<DialogType> = ({id, name}) => {\n    let path = `/Dialogs/${id}`\n    return (\n        <div className={s.Dialog}><NavLink to={path}>{name}</NavLink></div>\n    )\n}\n\n//types\ntype DialogType = {\n    id: number\n    name: string\n}\n","import React from 'react';\nimport s from '../Dialogs.module.css';\n\nexport const Message: React.FC<MessageType> = ({message}) => {\n    return (\n        <div className={s.Message}>{message}</div>\n    )\n}\n\n//types\ntype MessageType = {\n    message: string\n}\n","import React, {ComponentType} from 'react';\nimport {DialogsPageType, sendNewMessage, updateNewMessageText} from \"../../state/DialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {AppDispatch, RootState} from \"../../state/store\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nconst mapDispatchToProps = (dispatch: AppDispatch): MapDispatchToPropsType => {\n    return {\n        sendMessage: () => {\n            dispatch(sendNewMessage())\n        },\n        changeMessage: (text: string) => {\n            dispatch(updateNewMessageText(text))\n        }\n    }\n}\nexport default compose<ComponentType>(\n    connect (mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\n//types\ntype MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n}\ntype MapDispatchToPropsType = {\n    sendMessage: () => void\n    changeMessage: (text: string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport {Button} from \"../common/Button/Button\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\n\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, sendMessage, changeMessage}) => {\n\n    const {users, messages, newMessageText} = dialogsPage;\n\n    const dialogsData = users.map( u => <DialogsItem id={u.id} key={u.id} name={u.name}/>)\n    const messageData = messages.map((m => <Message message={m.message} key = {m.id}/>))\n\n    const onChangeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = event.currentTarget.value\n        changeMessage(text)\n    }\n\n    return (\n        <div className={s.Dialogs}>\n            <div className={s.DialogsItem}>\n                {dialogsData}\n            </div>\n            <div className={s.MessegesItem}>\n                {messageData}\n                <div>\n                    <textarea value={newMessageText} onChange={onChangeHandler}/>\n                    <Button title='Send message' callback={sendMessage}/>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\n\ntype ButtonPropsType = {\n    title: string\n    callback: () => void\n}\n\nexport const Button: React.FC<ButtonPropsType> = ({title, callback}) => {\n    return (\n        <button onClick={callback}>{title}</button>\n    )\n}","import {RootState} from \"../state/store\";\nimport React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: RootState): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\n    function RedirectComponent(props: mapStateToPropsType) {\n        const {isAuth, ...restProps} = props;\n        if (!props.isAuth) return <Redirect to='/Login'/>;\n        return <Component {...restProps as T}/>;\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}\n\n"],"names":["DialogsItem","id","name","path","className","s","to","Message","message","compose","connect","state","dialogsPage","dispatch","sendMessage","sendNewMessage","changeMessage","text","updateNewMessageText","withAuthRedirect","users","messages","newMessageText","dialogsData","map","u","messageData","m","value","onChange","event","currentTarget","Button","title","callback","onClick","mapStateToPropsForRedirect","isAuth","auth","Component","props","restProps"],"sourceRoot":""}