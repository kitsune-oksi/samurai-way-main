{"version":3,"file":"static/js/860.bdb192ab.chunk.js","mappings":"mOAOaA,EAAqC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aACxD,GAAiCC,EAAAA,EAAAA,WAAkB,GAAnD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,UAAiBF,GAAnD,eAAOK,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAaN,KACf,CAACA,IAUH,OAAO,yBACFG,GACG,0BACI,kBAAOK,SAAU,SAACC,GAAD,OAAKH,EAAaG,EAAEC,cAAcC,QAAQC,WAAW,EAAMC,OARtD,WAC9BT,GAAY,GACZH,EAAaI,IAM0GM,MAAON,OAG1H,0BACI,iBAAMS,cAfc,WAC5BV,GAAY,IAcJ,SAA+CJ,GAAU,gB,UCnB5De,EAAgC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,YAS/D,OAAO,4BACF,gBAAKC,KAAY,OAAPH,QAAO,IAAPA,OAAA,EAAAA,EAASI,OAAOC,QAASC,EAAWC,IAAK,WACnDN,IAAW,kBAAOO,KAAM,OAAQhB,SATP,SAACC,GACzB,IAAegB,EAAUhB,EAAlBiB,OAAQD,MACXA,GAASA,EAAM,IACfP,EAAYO,EAAM,W,kDCFxBE,EAASC,EAAAA,GAAW,CACtBC,SAAUD,EAAAA,KAAaE,WACvBC,QAASH,EAAAA,KAAaE,WACtBE,eAAgBJ,EAAAA,KAAcK,SAAQ,GAAMH,WAC5CI,0BAA2BN,EAAAA,KAC3BO,SAAUP,EAAAA,GAAW,CACjBQ,SAAUR,EAAAA,KAAaS,MACvBC,OAAQV,EAAAA,KAAaS,MACrBE,UAAWX,EAAAA,KAAaS,MACxBG,SAAUZ,EAAAA,KAAaS,MACvBI,QAASb,EAAAA,KAAaS,MACtBK,GAAId,EAAAA,KAAaS,MACjBM,QAASf,EAAAA,KAAaS,MACtBO,QAAShB,EAAAA,KAAaS,UAMjBQ,EAAmC,SAAC,GAAmE,IAAD,EAAjE7B,EAAiE,EAAjEA,QAAS8B,EAAwD,EAAxDA,gBAAiBC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eAE3F,GAIIC,EAAAA,EAAAA,IAAkB,CAClBC,UAAUC,EAAAA,EAAAA,GAAYxB,KAJtByB,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACYC,EAHhB,EAGIC,UAAYD,OAiBhB,OAAO,4BACH,SAACE,EAAA,EAAD,CAAQC,MAAO,OAAQC,SAAUL,GAbK,SAACM,GACvC,IAAMC,GAAgB,QAClBC,OAAQ7C,EAAQ6C,OAChBzC,OAAQJ,EAAQI,QACbuC,GAEPZ,EAAkBa,GAAiCE,MAAK,WACpDhB,GAAgB,GAChBE,EAAehC,EAAQ6C,iBAM3B,6BACI,8BAAO,6CAA4B,0BAC/BE,aAAc/C,EAAQgD,UAAcZ,EAAS,kBACjD,iCAAIE,EAAOzB,gBAAX,aAAI,EAAiBoC,WACrB,8BAAO,4CAA2B,0BAAOF,aAAc/C,EAAQkD,SAAad,EAAS,iBACrF,8BAAO,qDAAoC,0BAAO5B,KAAM,WACN2C,QAASnD,EAAQgB,gBAAoBoB,EAAS,wBAChG,8BAAO,+CAA8B,0BACjCW,aAAc/C,EAAQoD,2BAAgChB,EAAS,mCACnE,kCAAQ,2CACHiB,OAAOC,KAAKtD,EAAQmB,UAAUoC,KAAI,SAACC,EAAIC,GAAL,aAAe,4BAC9C,8BAAO,8BAASD,EAAT,SACH,0BAAOT,aAAc/C,EAAQmB,SAASqC,IAAUpB,EAAS,YAAD,OAAaoB,UAEzE,iCAAIlB,EAAOnB,gBAAX,aAAI,EAAkBqC,GAAIP,YAJ8BQ,gBCzD/DC,EAAmC,SAAC,GAAyC,IAAxC1D,EAAuC,EAAvCA,QAAS8B,EAA8B,EAA9BA,gBAAiB7B,EAAa,EAAbA,QACxE,OAAKD,GACE,2BACFC,IAAW,SAACuC,EAAA,EAAD,CAAQC,MAAO,mBAAoBC,SAAU,kBAAIZ,GAAgB,OAC7E,4BAAK,4CAAL,IAAmC9B,EAAQgD,aAC3C,4BAAK,2CAA4BhD,EAAQkD,YACzC,4BAAK,oDAAL,IAA2ClD,EAAQgB,eAAiB,MAAQ,SAC5E,4BAAK,8CAA+BhB,EAAQoD,8BAC5C,gCAAM,2CAAN,IAAmCC,OAAOC,KAAKtD,EAAQmB,UAAUoC,KAAI,SAACC,EAAIC,GAAL,OAAe,4BAAiB,8BAASD,EAAT,OAAjB,IAAyCxD,EAAQmB,SAASqC,KAAhDC,YAP7E,MCCZE,EAAsC,SAAC,GAA2D,IAA1D1D,EAAyD,EAAzDA,QAASD,EAAgD,EAAhDA,QAAS+B,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eAEtF,GAAgC9C,EAAAA,EAAAA,WAAS,GAAzC,eAAO0E,EAAP,KAAiBxE,EAAjB,KAEM0C,EAAkB,SAAC+B,GACrBzE,EAAYyE,IAGhB,OAAO,yBACF5D,GAAW2D,GACR,SAAC/B,EAAD,CAAiB7B,QAASA,EAAS8B,gBAAiBA,EAAiBC,kBAAmBA,EAAmBC,eAAgBA,KAC3H,SAAC0B,EAAD,CAAiB1D,QAASA,EAAS8B,gBAAiBA,EAAiB7B,QAASA,OCjB7E6D,EAA0C,SAAC,GAA8F,IAA7F9D,EAA4F,EAA5FA,QAAShB,EAAmF,EAAnFA,OAAQC,EAA2E,EAA3EA,aAAcgB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,YAAa6B,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eAC7H,OAAO,+BACH,4BACI,SAACjC,EAAD,CAAcC,QAASA,EAASE,YAAaA,EAAaD,QAASA,KACnE,SAAClB,EAAD,CAAeC,OAAQA,EAAQC,aAAcA,KAC7C,SAAC0E,EAAD,CAAoB3D,QAASA,EAASC,QAASA,EAAS8B,kBAAmBA,EAAmBC,eAAgBA,U,mBCL7G+B,EAAQ,SAACC,GAClB,OACI,yBACKA,EAAMC,MAAMV,KAAI,SAAAC,GACb,OACI,yBAAkBA,EAAGU,MAAXV,EAAGW,UCWpBC,GAAmBC,EAAAA,EAAAA,KAhBR,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,QAAS,WACLD,GAASC,EAAAA,EAAAA,QAEbC,kBAAmB,SAACC,GAChBH,GAASI,EAAAA,EAAAA,IAAcD,QAKHN,ECjBa,SAAC,GAA+C,IAA9CI,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,kBAAmBH,EAAiB,EAAjBA,YAEhEM,EAAyBN,EAAzBM,eAAgBZ,EAASM,EAATN,MAOvB,OACI,4BACI,uCACA,qBAAUtE,MAAOkF,EAAgBrF,SARjB,SAACC,GACrB,IAAIkF,EAAOlF,EAAEC,cAAcC,MAC3B+E,EAAkBC,OAOd,SAACnC,EAAA,EAAD,CAAQC,MAAM,WAAWC,SAAU+B,KACnC,SAACV,EAAD,CAAOE,MAAOA,UCHba,EAAsC,SAAC,GAA8F,IAA7F9E,EAA4F,EAA5FA,QAAShB,EAAmF,EAAnFA,OAAQC,EAA2E,EAA3EA,aAAcgB,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,YAAa6B,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eACzH,OACI,4BACI,SAAC8B,EAAD,CAAa9D,QAASA,EAAShB,OAAQA,EAAQC,aAAcA,EAAcgB,QAASA,EAASC,YAAaA,EAAa6B,kBAAmBA,EAAmBC,eAAgBA,KAC7K,SAACoC,EAAD,Q,8BCJNW,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA8BD,OA9BCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKjB,MAAMkB,MAAMC,OAAOH,OAChCA,IACGC,KAAKjB,MAAMoB,gBACXJ,EAASC,KAAKjB,MAAMoB,gBAEpBH,KAAKjB,MAAMqB,QAAQC,KAAK,WAIhCL,KAAKjB,MAAMhC,eAAegD,GAC1BC,KAAKjB,MAAMuB,UAAUP,KACxB,+BAED,WACIC,KAAKO,mBACR,gCAED,SAAmBC,EAAgCC,GAC3CD,EAAUP,MAAMC,OAAOH,SAAWC,KAAKjB,MAAMkB,MAAMC,OAAOH,QAC1DC,KAAKO,mBAEZ,oBAED,WACI,OAAO,SAACV,EAAD,CAAS9E,QAASiF,KAAKjB,MAAMhE,QAAShB,OAAQiG,KAAKjB,MAAMhF,OAChDC,aAAcgG,KAAKjB,MAAM/E,aAAcgB,SAAUgF,KAAKjB,MAAMkB,MAAMC,OAAOH,OACzE9E,YAAa+E,KAAKjB,MAAM9D,YAAa6B,kBAAmBkD,KAAKjB,MAAMjC,kBAAmBC,eAAgBiD,KAAKjB,MAAMhC,qBACpI,EA9BC+C,CAAyBY,EAAAA,WAwC/B,GAAeC,EAAAA,EAAAA,KACXvB,EAAAA,EAAAA,KARoB,SAACC,GAAD,MAAkD,CACtEtE,QAASsE,EAAMC,YAAYvE,QAC3BhB,OAAQsF,EAAMC,YAAYvF,OAC1BoG,gBAAiBd,EAAMuB,KAAK1B,GAC5B2B,OAAQxB,EAAMuB,KAAKC,UAIM,CAAC9D,eAAAA,EAAAA,GAAgBuD,UAAAA,EAAAA,GAAWtG,aAAAA,EAAAA,GAAciB,YAAAA,EAAAA,GAAa6B,kBAAAA,EAAAA,KAChFgE,EAAAA,GACAC,EAAAA,EAHJ,CAIEjB,I,0ECrDWvC,EAAoC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtD,OACI,mBAAQuD,QAASvD,EAAjB,SAA4BD,M,gICD9ByD,EAA6B,SAAC5B,GAChC,MAAO,CACHwB,OAAQxB,EAAMuB,KAAKC,SAIpB,SAASE,EAAqBG,GAOjC,OAAO9B,EAAAA,EAAAA,IAAQ6B,EAAR7B,EANP,SAA2BL,GACQA,EAAxB8B,OAAP,IAAkBM,GAAlB,OAA+BpC,EAA/B,GACA,OAAKA,EAAM8B,QACJ,SAACK,GAAD,UAAeC,KADI,SAAC,KAAD,CAAUC,GAAG,gB","sources":["Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfilePhoto/ProfilePhoto.tsx","Components/Profile/ProfileInfo/ProfileDescription/DescriptionForm.tsx","Components/Profile/ProfileInfo/ProfileDescription/DescriptionData.tsx","Components/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Posts/Posts.tsx","Components/Profile/Posts/MyPostsContainer.tsx","Components/Profile/Posts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","Components/common/Button/Button.tsx","HOC/withAuthRedirect.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatus: React.FC<PropsType> = ({status, updateStatus}) => {\n    const [editeMode, setEditMode] = useState<boolean>(false);\n    const [newStatus, setNewStatus] = useState<string>(status)\n\n    useEffect(()=>{\n        setNewStatus(status)\n    },[status])\n\n    const activateEditModeHandler = () => {\n        setEditMode(true)\n    }\n    const deactivateEditModeHandler = () => {\n        setEditMode(false);\n        updateStatus(newStatus)\n    }\n\n    return <div>\n        {editeMode ?\n            <div>\n                <input onChange={(e)=>setNewStatus(e.currentTarget.value)} autoFocus={true} onBlur={deactivateEditModeHandler} value={newStatus}/>\n            </div>\n            :\n            <div>\n                <span onDoubleClick={activateEditModeHandler}>{status || '------'}</span>\n            </div>\n        }\n    </div>\n}\n\n// class _ProfileStatus extends React.Component<PropsType, RootState> {\n//\n//     state = {\n//         editeMode: false,\n//         status: this.props.status\n//     }\n//     activateEditeMode = () => {\n//         this.setState({\n//             editeMode: true\n//         })\n//     }\n//     deactivateEditeMode = () => {\n//         this.setState({\n//             editeMode: false\n//         })\n//         this.props.updateStatus(this.state.status)\n//     }\n//     onStatusChange = (e: any) => {\n//         this.setState({\n//             status: e.currentTarget.value\n//         })\n//     }\n//     componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\n//         if (prevProps.status !== this.props.status) {\n//             this.setState({\n//                 status: this.props.status\n//             })\n//         }\n//     }\n//\n//     render() {\n//         return (\n//             <div>\n//                 {this.state.editeMode ?\n//                     <div>\n//                         <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditeMode} value={this.state.status}/>\n//                     </div>\n//                     :\n//                     <div>\n//                         <span onDoubleClick={this.activateEditeMode}>{this.props.status || '------'}</span>\n//                     </div>\n//                 }\n//             </div>\n//         )\n//     }\n// }\n","import userPhoto from \"../../../../assets/images/user.png\";\nimport React, {ChangeEvent} from \"react\";\nimport {ProfileType} from \"../../../../state/ProfileReducer\";\n\ntype Props = {\n    profile: ProfileType\n    isOwner: boolean\n    updatePhoto: (photo: File) => void\n\n}\n\nexport const ProfilePhoto: React.FC<Props> = ({profile, isOwner, updatePhoto}) => {\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        const {target:{files}} = e;\n        if (files && files[0]) {\n            updatePhoto(files[0])\n        }\n    }\n\n  return <div>\n      {<img src={profile?.photos.large || userPhoto} alt={'avatar'}/>}\n      {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\n  </div>\n}","import React from \"react\";\nimport {ProfileType} from \"../../../../state/ProfileReducer\";\nimport {Button} from \"../../../common/Button/Button\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport {yupResolver} from \"@hookform/resolvers/yup\";\n\ntype Props = {\n    profile: ProfileType\n    editModeHandler: (isEdit: boolean) => void\n    updateDescription: (descriptionModel: ProfileType) => Promise<void>\n    getUserProfile: (userID: string) => void\n}\n\nconst schema = yup.object({\n    FullName: yup.string().required(),\n    AboutMe: yup.string().required(),\n    lookingForAJob: yup.boolean().default(true).required(),\n    LookingForAJobDescription: yup.string(),\n    contacts: yup.object({\n        facebook: yup.string().url(),\n        github: yup.string().url(),\n        instagram: yup.string().url(),\n        mainLink: yup.string().url(),\n        twitter: yup.string().url(),\n        vk: yup.string().url(),\n        website: yup.string().url(),\n        youtube: yup.string().url(),\n    })\n})\n\ntype FormData = yup.InferType<typeof schema>;\n\nexport const DescriptionForm: React.FC<Props> = ({profile, editModeHandler, updateDescription, getUserProfile}) => {\n\n    const {\n        register,\n        handleSubmit,\n        formState: {errors},\n    } = useForm<FormData>({\n        resolver: yupResolver(schema)\n    })\n\n    const onSubmit: SubmitHandler<FormData> = (data) => {\n        const descriptionModel = {\n            userId: profile.userId,\n            photos: profile.photos,\n            ...data\n        }\n        updateDescription(descriptionModel as ProfileType).then(()=>{\n            editModeHandler(false)\n            getUserProfile(profile.userId);\n        });\n    }\n\n    return <div>\n        <Button title={'Save'} callback={handleSubmit(onSubmit)}/>\n        <form>\n            <label><strong>Full name: </strong><input\n                defaultValue={profile.fullName} {...register('FullName')} /></label>\n            <p>{errors.FullName?.message}</p>\n            <label><strong>About me: </strong><input defaultValue={profile.aboutMe} {...register('AboutMe')} /></label>\n            <label><strong>Looking for a job: </strong><input type={'checkbox'}\n                                                              checked={profile.lookingForAJob} {...register('lookingForAJob')} /></label>\n            <label><strong>Description: </strong><input\n                defaultValue={profile.lookingForAJobDescription}  {...register('LookingForAJobDescription')} /></label>\n            <label> <strong>Contacts: </strong>\n                {Object.keys(profile.contacts).map((el, index) => <div key={index}>\n                    <label><strong>{el}: </strong>\n                        <input defaultValue={profile.contacts[el]}  {...register(`contacts.${el}`)} />\n                    </label>\n                    <p>{errors.contacts?.[el].message}</p>\n                </div>)}\n            </label>\n        </form>\n    </div>;\n}","import React from \"react\";\nimport {ProfileType} from \"../../../../state/ProfileReducer\";\nimport {Button} from \"../../../common/Button/Button\";\n\ntype Props = {\n    profile: ProfileType\n    editModeHandler: (isEdit: boolean) => void\n    isOwner: boolean\n}\n\nexport const DescriptionData: React.FC<Props> = ({profile, editModeHandler, isOwner}) => {\n    if (!profile) return null\n    return <div>\n        {isOwner && <Button title={'Edit description'} callback={()=>editModeHandler(true)}/>}\n        <div><strong>Full name: </strong> {profile.fullName}</div>\n        <div><strong>About me: </strong>{profile.aboutMe}</div>\n        <div><strong>Looking for a job: </strong> {profile.lookingForAJob ? 'Yes' : 'No'}</div>\n        <div><strong>Description: </strong>{profile.lookingForAJobDescription}</div>\n        <div> <strong>Contacts: </strong> {Object.keys(profile.contacts).map((el, index) => <div key={index}><strong>{el}:</strong> {profile.contacts[el]}</div>)}</div>\n    </div>;\n}","import {DescriptionForm} from \"./DescriptionForm\";\nimport {DescriptionData} from \"./DescriptionData\";\nimport React, {useState} from \"react\";\nimport {ProfileType} from \"../../../../state/ProfileReducer\";\n\ntype Props = {\n    isOwner: boolean\n    profile: ProfileType\n    updateDescription: (descriptionModel: ProfileType) => Promise<void>\n    getUserProfile: (userID: string) => void\n}\n\nexport const ProfileDescription: React.FC<Props> = ({isOwner, profile, updateDescription, getUserProfile}) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n    const editModeHandler = (isEdit: boolean) => {\n        setEditMode(isEdit)\n    }\n\n    return <div>\n        {isOwner && editMode ?\n            <DescriptionForm profile={profile} editModeHandler={editModeHandler} updateDescription={updateDescription} getUserProfile={getUserProfile}/> :\n            <DescriptionData profile={profile} editModeHandler={editModeHandler} isOwner={isOwner}/>}\n    </div>\n}","import React from \"react\";\nimport {ProfilePropsType} from \"../Profile\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\nimport {ProfilePhoto} from \"./ProfilePhoto/ProfilePhoto\";\nimport {ProfileDescription} from \"./ProfileDescription/ProfileDescription\";\n\nexport const ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus, isOwner, updatePhoto, updateDescription, getUserProfile}) => {\n    return <>\n        <div>\n            <ProfilePhoto profile={profile} updatePhoto={updatePhoto} isOwner={isOwner}/>\n            <ProfileStatus status={status} updateStatus={updateStatus}/>\n            <ProfileDescription profile={profile} isOwner={isOwner} updateDescription={updateDescription} getUserProfile={getUserProfile}/>\n        </div>\n    </>\n}","import {PostType} from \"../../../state/ProfileReducer\";\n\ntype PostsPropsType = {\n    posts: PostType[]\n}\n\nexport const Posts = (props: PostsPropsType) => {\n    return (\n        <div>\n            {props.posts.map(el => {\n                return (\n                    <div key={el.id}>{el.post}</div>\n                )\n            })}\n        </div>\n    )\n}","import React from 'react';\nimport {addPost, ProfilePageType, updateNewPost} from '../../../state/ProfileReducer';\nimport {connect} from \"react-redux\";\nimport {AppDispatch, RootState} from \"../../../state/store\";\nimport {MyPost} from \"./MyPosts\";\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        profilePage: state.profilePage\n    }\n}\nconst mapDispatchToProps = (dispatch: AppDispatch): MapDispatchToPropsType => {\n    return {\n        addPost: () => {\n            dispatch(addPost())\n        },\n        updateNewPostText: (text: string) => {\n            dispatch(updateNewPost(text))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPost);\n\n//types\ntype MapStateToPropsType = {\n    profilePage: ProfilePageType\n}\ntype MapDispatchToPropsType = {\n    addPost: () => void\n    updateNewPostText: (text: string) => void\n}\nexport type ProfileType = MapStateToPropsType & MapDispatchToPropsType","import React, {ChangeEvent} from 'react';\nimport {Button} from \"../../common/Button/Button\";\nimport {Posts} from \"./Posts\";\nimport {ProfileType} from \"./MyPostsContainer\";\n\nexport const MyPost: React.FC<ProfileType> = ({addPost, updateNewPostText, profilePage}) => {\n\n    const {newPostMessage, posts} = profilePage;\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value;\n        updateNewPostText(text)\n    }\n\n    return (\n        <div>\n            <div>My posts</div>\n            <textarea value={newPostMessage} onChange={onChangeHandler}/>\n            <Button title='Add post' callback={addPost}/>\n            <Posts posts={posts}/>\n        </div>\n    )\n}","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./Posts/MyPostsContainer\";\nimport {ProfileType} from \"../../state/ProfileReducer\";\n\nexport type ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    updatePhoto: (photo: File) => void\n    updateDescription: (descriptionModel: ProfileType) => Promise<void>\n    getUserProfile: (userID: string) => void\n\n}\n\nexport const Profile: React.FC<ProfilePropsType> = ({profile, status, updateStatus, isOwner, updatePhoto, updateDescription, getUserProfile}) => {\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={isOwner} updatePhoto={updatePhoto} updateDescription={updateDescription} getUserProfile={getUserProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}","import React, {ComponentType} from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getStatus,\n    getUserProfile,\n    ProfileType,\n    updateDescription,\n    updatePhoto,\n    updateStatus\n} from \"../../state/ProfileReducer\";\nimport {RootState} from \"../../state/store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component<PropsType, RootState> {\n\n    refreshProfile() {\n        let userID = this.props.match.params.userID;\n        if (!userID) {\n            if (this.props.autorizedUserID) {\n                userID = this.props.autorizedUserID\n            } else {\n                this.props.history.push('/Login')\n            }\n\n        }\n        this.props.getUserProfile(userID)\n        this.props.getStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<RootState>) {\n        if (prevProps.match.params.userID !== this.props.match.params.userID) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return <Profile profile={this.props.profile} status={this.props.status}\n                        updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userID}\n                        updatePhoto={this.props.updatePhoto} updateDescription={this.props.updateDescription} getUserProfile={this.props.getUserProfile}/>;\n    }\n}\n\nconst mapStateToProps = (state: RootState): ProfileContainerStateType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    autorizedUserID: state.auth.id,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, updatePhoto, updateDescription}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n//types\ntype ProfileContainerStateType = {\n    profile: ProfileType\n    status: string\n    autorizedUserID: string | null\n    isAuth: boolean\n}\ntype ProfileContainerDispatchType = {\n    getUserProfile: (userID: string) => void\n    getStatus: (userID: string) => void\n    updateStatus: (status: string) => void\n    updatePhoto: (photo: any) => void\n    updateDescription: (descriptionModel: ProfileType) => Promise<void>\n}\ntype ProfileContainerPropsType = ProfileContainerStateType & ProfileContainerDispatchType\ntype PathParamsType = {\n    userID: string\n}\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType","import React from \"react\";\n\ntype ButtonPropsType = {\n    title: string\n    callback: () => void\n}\n\nexport const Button: React.FC<ButtonPropsType> = ({title, callback}) => {\n    return (\n        <button onClick={callback}>{title}</button>\n    )\n}","import {RootState} from \"../state/store\";\nimport React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\nconst mapStateToPropsForRedirect = (state: RootState): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\n    function RedirectComponent(props: mapStateToPropsType) {\n        const {isAuth, ...restProps} = props;\n        if (!props.isAuth) return <Redirect to='/Login'/>;\n        return <Component {...restProps as T}/>;\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}\n\n"],"names":["ProfileStatus","status","updateStatus","useState","editeMode","setEditMode","newStatus","setNewStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfilePhoto","profile","isOwner","updatePhoto","src","photos","large","userPhoto","alt","type","files","target","schema","yup","FullName","required","AboutMe","lookingForAJob","default","LookingForAJobDescription","contacts","facebook","url","github","instagram","mainLink","twitter","vk","website","youtube","DescriptionForm","editModeHandler","updateDescription","getUserProfile","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Button","title","callback","data","descriptionModel","userId","then","defaultValue","fullName","message","aboutMe","checked","lookingForAJobDescription","Object","keys","map","el","index","DescriptionData","ProfileDescription","editMode","isEdit","ProfileInfo","Posts","props","posts","post","id","MyPostsContainer","connect","state","profilePage","dispatch","addPost","updateNewPostText","text","updateNewPost","newPostMessage","Profile","ProfileContainer","userID","this","match","params","autorizedUserID","history","push","getStatus","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","withRouter","withAuthRedirect","onClick","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}